// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static final firebaseApiKeyAndroid =
      dotenv.get('FIREBASE_API_KEY_ANDROID', fallback: 'a');
  static final firebaseAppIdAndroid =
      dotenv.get('FIREBASE_APP_ID_ANDROID', fallback: 'a');
  static final firebaseApiKeyIos =
      dotenv.get('FIREBASE_API_KEY_IOS', fallback: 'a');
  static final firebaseAppIdIos =
      dotenv.get('FIREBASE_APP_ID_IOS', fallback: 'a');
  static final firebaseProjectId =
      dotenv.get('FIREBASE_PROJECT_ID', fallback: 'a');
  static final firebaseMensageSenderId =
      dotenv.get('FIREBASE_MENSAGE_SENDER_ID', fallback: 'a');
  static final firebaseStorageBucket =
      dotenv.get('FIREBASE_STORAGE_BUCKET', fallback: 'a');
  static final firebaseIosBundleId =
      dotenv.get('FIREBASE_IOS_BUNDLE_ID', fallback: 'a');

  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static final FirebaseOptions android = FirebaseOptions(
    apiKey: firebaseApiKeyAndroid,
    appId: firebaseAppIdAndroid,
    messagingSenderId: firebaseMensageSenderId,
    projectId: firebaseProjectId,
    storageBucket: firebaseStorageBucket,
  );

  static final FirebaseOptions ios = FirebaseOptions(
    apiKey: firebaseApiKeyIos,
    appId: firebaseAppIdIos,
    messagingSenderId: firebaseMensageSenderId,
    projectId: firebaseProjectId,
    storageBucket: firebaseStorageBucket,
    iosBundleId: firebaseIosBundleId,
  );
}
